[
    {
        "id": "e3362431f3372381",
        "type": "subflow",
        "name": "QuickSort",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 140,
                "y": 120,
                "wires": [
                    {
                        "id": "36dec23814efedfb"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 580,
                "y": 120,
                "wires": [
                    {
                        "id": "aa7c06d534637cf0",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "36dec23814efedfb",
        "type": "function",
        "z": "e3362431f3372381",
        "name": "Quick Sort",
        "func": "function quickSort(arr, left, right) {\n    if (left < right) {\n        const pivotIndex = partition(arr, left, right);\n        quickSort(arr, left, pivotIndex - 1);\n        quickSort(arr, pivotIndex + 1, right);\n    }\n    return arr;\n}\n\nfunction partition(arr, left, right) {\n    // const pivot = new Date(arr[right].date);\n    const pivot = arr[right].date;\n    let i = left - 1;\n\n    for (let j = left; j < right; j++) {\n        // const currentDate = new Date(arr[j].date);\n        const currentDate = arr[j].date;\n        if (currentDate < pivot) {\n            i++;\n            swap(arr, i, j);\n        }\n    }\n\n    swap(arr, i + 1, right);\n    return i + 1;\n}\n\nfunction swap(arr, i, j) {\n    const temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n}\n\nvar list = msg.payload;\nfor (let key in list) {\n    list[key] = quickSort(list[key], 0, list[key].length - 1);\n}\nmsg.payload = list;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 120,
        "wires": [
            [
                "aa7c06d534637cf0"
            ]
        ]
    },
    {
        "id": "aa7c06d534637cf0",
        "type": "function",
        "z": "e3362431f3372381",
        "name": "Reverse Sort",
        "func": "// Input: list - array of dictionaries [{ temperature: number, date: string }]\nif (!msg.reverse_sort){\n    return msg;\n}\n\nvar list = msg.payload;\nfor (let key in list) {\n    list[key] = list[key].reverse();\n}\nmsg.payload = list;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "0e5ee74342c0495d",
        "type": "subflow",
        "name": "Calculate Weighted Average",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 160,
                "y": 240,
                "wires": [
                    {
                        "id": "fee3903a5b91d9a4"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 580,
                "y": 180,
                "wires": [
                    {
                        "id": "9442ae94d5fbbe05",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "9442ae94d5fbbe05",
        "type": "function",
        "z": "0e5ee74342c0495d",
        "name": "Calculate Weighted Average",
        "func": "function calc_weight_avg(list) {\n    // Calculate total weight and weighted sum\n    let totalWeight = 0;\n    let weightedSum = 0;\n\n    list.forEach((temperature, index) => {\n        const weight = index + 1;\n\n        weightedSum += temperature.value * weight;\n        totalWeight += weight;\n    });\n\n    const weightedAverage = weightedSum / totalWeight;\n    return weightedAverage;\n}\n\nconst list = msg.payload;\nfor (let key in list) {\n    list[key] = calc_weight_avg(list[key]);\n}\n\nmsg.payload = list;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "3c2a8c86e72ab097",
        "type": "subflow:e3362431f3372381",
        "z": "0e5ee74342c0495d",
        "name": "",
        "x": 380,
        "y": 240,
        "wires": [
            [
                "9442ae94d5fbbe05"
            ]
        ]
    },
    {
        "id": "fee3903a5b91d9a4",
        "type": "change",
        "z": "0e5ee74342c0495d",
        "name": "REVERSE SORT TRUE",
        "rules": [
            {
                "t": "set",
                "p": "reverse_sort",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 230,
        "y": 320,
        "wires": [
            [
                "3c2a8c86e72ab097"
            ]
        ]
    },
    {
        "id": "1c1d09cb50197133",
        "type": "subflow",
        "name": "Get Many Weather API Data",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 160,
                "y": 180,
                "wires": [
                    {
                        "id": "f5e296816b0a808e"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 2140,
                "y": 120,
                "wires": [
                    {
                        "id": "445ca5f07bd03145",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "870258360fc34f6f",
        "type": "http request",
        "z": "1c1d09cb50197133",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 530,
        "y": 140,
        "wires": [
            [
                "7f921967cd011a07"
            ]
        ]
    },
    {
        "id": "f5e296816b0a808e",
        "type": "function",
        "z": "1c1d09cb50197133",
        "name": "Weather APIs",
        "func": "var lat = msg.city.lat;\nvar lng = msg.city.lng;\nvar weatherapi_key = msg.weatherapi_key;\nvar openweathermapapi_key = msg.openweathermapapi_key;\nvar tommorowapi_key = msg.tommorowapi_key;\nvar weatherapi = {topic:\"weatherapi\", url:`http://api.weatherapi.com/v1/current.json?key=${weatherapi_key}&q=${lat},${lng}&aqi=no`}\nvar openweather = { topic: \"openweather\",url: `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lng}&appid=${openweathermapapi_key}&units=metric`}\nvar tommorowapi = { topic: \"tommorowapi\",url: `https://api.tomorrow.io/v4/weather/realtime?location=${lat},${lng}&apikey=${tommorowapi_key}`}\nvar openmeteoapi = { topic: \"openmeteoapi\", url: `https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lng}&current_weather=true&hourly=temperature_2m,relativehumidity_2m,surface_pressure,cloudcover,visibility&forecast_days=1`}\nreturn [weatherapi, openweather, tommorowapi, openmeteoapi];",
        "outputs": 4,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 200,
        "wires": [
            [
                "870258360fc34f6f"
            ],
            [
                "23da8d707aaaceef"
            ],
            [
                "3fa7c5a192c04673"
            ],
            [
                "fcbaf5c82897ce0b"
            ]
        ]
    },
    {
        "id": "23da8d707aaaceef",
        "type": "http request",
        "z": "1c1d09cb50197133",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 530,
        "y": 180,
        "wires": [
            [
                "7f921967cd011a07"
            ]
        ]
    },
    {
        "id": "3fa7c5a192c04673",
        "type": "http request",
        "z": "1c1d09cb50197133",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 530,
        "y": 220,
        "wires": [
            [
                "7f921967cd011a07"
            ]
        ]
    },
    {
        "id": "fcbaf5c82897ce0b",
        "type": "http request",
        "z": "1c1d09cb50197133",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 530,
        "y": 260,
        "wires": [
            [
                "7f921967cd011a07"
            ]
        ]
    },
    {
        "id": "7f921967cd011a07",
        "type": "join",
        "z": "1c1d09cb50197133",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "4",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 710,
        "y": 200,
        "wires": [
            [
                "f343866b392379ef",
                "fa70787883fe9b16",
                "f0b3237d262551ce",
                "d10e44f3bcdfb9f5",
                "aee8abb6d40c18b4",
                "0b21169bf4a24a6f",
                "c1d8d69c093a01f1",
                "0c475f2f2b341f84",
                "5d34355f66dfb6a5"
            ]
        ]
    },
    {
        "id": "f343866b392379ef",
        "type": "debug",
        "z": "1c1d09cb50197133",
        "name": "debug 60",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 80,
        "wires": []
    },
    {
        "id": "fa70787883fe9b16",
        "type": "function",
        "z": "1c1d09cb50197133",
        "name": "Make list of temps & dates",
        "func": "var weatherapi_dict = { \"date\": Date.parse(msg.payload['weatherapi']['current']['last_updated']), \"value\": msg.payload['weatherapi']['current']['temp_c']};\nvar openmeteoapi_dict = { \"date\": Date.parse(msg.payload['openmeteoapi']['current_weather']['time']), \"value\": msg.payload['openmeteoapi']['current_weather']['temperature']};\nvar tommorowapi_dict = { \"date\": Date.parse(msg.payload['tommorowapi']['data']['time']), \"value\": msg.payload['tommorowapi']['data']['values']['temperature'] };\nvar openweatherapi_dict = { \"date\": msg.payload['openweather']['dt'] * 1000, \"value\": msg.payload['openweather']['main']['temp']};\nmsg.payload = [weatherapi_dict,openmeteoapi_dict,openweatherapi_dict,tommorowapi_dict];\nmsg.topic = \"temperature\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 240,
        "wires": [
            [
                "8fce24e929f52d06"
            ]
        ]
    },
    {
        "id": "f0b3237d262551ce",
        "type": "function",
        "z": "1c1d09cb50197133",
        "name": "Make list of windsp & dates",
        "func": "// wind speed is meters per second.\nvar weatherapi_dict = { \"date\": Date.parse(msg.payload['weatherapi']['current']['last_updated']), \"value\": msg.payload['weatherapi']['current']['wind_kph'] * 0.2778};\nvar openmeteoapi_dict = { \"date\": Date.parse(msg.payload['openmeteoapi']['current_weather']['time']), \"value\": msg.payload['openmeteoapi']['current_weather']['windspeed'] * 0.2778};\nvar tommorowapi_dict = { \"date\": Date.parse(msg.payload['tommorowapi']['data']['time']), \"value\": msg.payload['tommorowapi']['data']['values']['windSpeed'] };\nvar openweatherapi_dict = { \"date\": msg.payload['openweather']['dt'] * 1000, \"value\": msg.payload['openweather']['wind']['speed']};\nmsg.payload = [weatherapi_dict,openmeteoapi_dict,openweatherapi_dict,tommorowapi_dict];\nmsg.topic = \"wind_speed\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 280,
        "wires": [
            [
                "8fce24e929f52d06"
            ]
        ]
    },
    {
        "id": "d10e44f3bcdfb9f5",
        "type": "function",
        "z": "1c1d09cb50197133",
        "name": "Make list of pressure & dates",
        "func": "// wind speed is meters per second.\nconst currentTimestamp = Date.now();\nconst time_of_day = msg.payload['openmeteoapi']['hourly']['time'];\nvar latest_time = 0;\n// console.log(currentTimestamp);\nvar index = 0;\nfor(var time of time_of_day){\n    const time_ml = Date.parse(time);    // converts seconds to miliseconds.\n    if (time_ml <= currentTimestamp){\n        latest_time = time_ml;\n        index += 1;\n        console.log(latest_time);\n    } else {\n        break;\n    }\n}\nindex -= 1;\n// msg.payload = latest_time;\nconsole.log(index);\nvar weatherapi_dict = { \"date\": Date.parse(msg.payload['weatherapi']['current']['last_updated']), \"value\": msg.payload['weatherapi']['current']['pressure_mb']};\nvar openmeteoapi_dict = { \"date\": latest_time, \"value\": msg.payload['openmeteoapi']['hourly']['surface_pressure'][index]};\nvar tommorowapi_dict = { \"date\": Date.parse(msg.payload['tommorowapi']['data']['time']), \"value\": msg.payload['tommorowapi']['data']['values']['pressureSurfaceLevel']};\nvar openweatherapi_dict = { \"date\": msg.payload['openweather']['dt'] * 1000, \"value\": msg.payload['openweather']['main']['pressure']};\nmsg.payload = [weatherapi_dict,openmeteoapi_dict,openweatherapi_dict,tommorowapi_dict];\nmsg.topic = \"pressure\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 320,
        "wires": [
            [
                "8fce24e929f52d06"
            ]
        ]
    },
    {
        "id": "aee8abb6d40c18b4",
        "type": "function",
        "z": "1c1d09cb50197133",
        "name": "Make list of visibility & dates",
        "func": "// wind speed is meters per second.\nconst currentTimestamp = Date.now();\nconst time_of_day = msg.payload['openmeteoapi']['hourly']['time'];\nvar latest_time = 0;\n// console.log(currentTimestamp);\nvar index = 0;\nfor(var time of time_of_day){\n    const time_ml = Date.parse(time);    // converts seconds to miliseconds.\n    if (time_ml <= currentTimestamp){\n        latest_time = time_ml;\n        index += 1;\n        console.log(latest_time);\n    } else {\n        break;\n    }\n}\nindex -= 1;\n// msg.payload = latest_time;\nconsole.log(index);\nvar weatherapi_dict = { \"date\": Date.parse(msg.payload['weatherapi']['current']['last_updated']), \"value\": msg.payload['weatherapi']['current']['vis_km'] * 1000};\nvar openmeteoapi_dict = { \"date\": latest_time, \"value\": msg.payload['openmeteoapi']['hourly']['visibility'][index]};\nvar tommorowapi_dict = { \"date\": Date.parse(msg.payload['tommorowapi']['data']['time']), \"value\": msg.payload['tommorowapi']['data']['values']['visibility'] * 1000};\nvar openweatherapi_dict = { \"date\": msg.payload['openweather']['dt'] * 1000, \"value\": msg.payload['openweather']['visibility']};\nmsg.payload = [weatherapi_dict,openmeteoapi_dict,openweatherapi_dict,tommorowapi_dict];\nmsg.topic = \"visibility\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 360,
        "wires": [
            [
                "8fce24e929f52d06"
            ]
        ]
    },
    {
        "id": "0b21169bf4a24a6f",
        "type": "function",
        "z": "1c1d09cb50197133",
        "name": "Make list of humidity & dates",
        "func": "// wind speed is meters per second.\nconst currentTimestamp = Date.now();\nconst time_of_day = msg.payload['openmeteoapi']['hourly']['time'];\nvar latest_time = 0;\n// console.log(currentTimestamp);\nvar index = 0;\nfor(var time of time_of_day){\n    const time_ml = Date.parse(time);    // converts seconds to miliseconds.\n    if (time_ml <= currentTimestamp){\n        latest_time = time_ml;\n        index += 1;\n        console.log(latest_time);\n    } else {\n        break;\n    }\n}\nindex -= 1;\n// msg.payload = latest_time;\nconsole.log(index);\nvar weatherapi_dict = { \"date\": Date.parse(msg.payload['weatherapi']['current']['last_updated']), \"value\": msg.payload['weatherapi']['current']['humidity']};\nvar openmeteoapi_dict = { \"date\": latest_time, \"value\": msg.payload['openmeteoapi']['hourly']['relativehumidity_2m'][index]};\nvar tommorowapi_dict = { \"date\": Date.parse(msg.payload['tommorowapi']['data']['time']), \"value\": msg.payload['tommorowapi']['data']['values']['humidity']};\nvar openweatherapi_dict = { \"date\": msg.payload['openweather']['dt'] * 1000, \"value\": msg.payload['openweather']['main']['humidity']};\nmsg.payload = [weatherapi_dict,openmeteoapi_dict,openweatherapi_dict,tommorowapi_dict];\nmsg.topic = \"humidity\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 400,
        "wires": [
            [
                "8fce24e929f52d06"
            ]
        ]
    },
    {
        "id": "c1d8d69c093a01f1",
        "type": "function",
        "z": "1c1d09cb50197133",
        "name": "Make list of cloud & dates",
        "func": "// wind speed is meters per second.\nconst currentTimestamp = Date.now();\nconst time_of_day = msg.payload['openmeteoapi']['hourly']['time'];\nvar latest_time = 0;\n// console.log(currentTimestamp);\nvar index = 0;\nfor(var time of time_of_day){\n    const time_ml = Date.parse(time);    // converts seconds to miliseconds.\n    if (time_ml <= currentTimestamp){\n        latest_time = time_ml;\n        index += 1;\n        console.log(latest_time);\n    } else {\n        break;\n    }\n}\nindex -= 1;\n// msg.payload = latest_time;\nconsole.log(index);\nvar weatherapi_dict = { \"date\": Date.parse(msg.payload['weatherapi']['current']['last_updated']), \"value\": msg.payload['weatherapi']['current']['cloud']};\nvar openmeteoapi_dict = { \"date\": latest_time, \"value\": msg.payload['openmeteoapi']['hourly']['cloudcover'][index]};\nvar tommorowapi_dict = { \"date\": Date.parse(msg.payload['tommorowapi']['data']['time']), \"value\": msg.payload['tommorowapi']['data']['values']['cloudCover']};\nvar openweatherapi_dict = { \"date\": msg.payload['openweather']['dt'] * 1000, \"value\": msg.payload['openweather']['clouds']['all']};\nmsg.payload = [weatherapi_dict,openmeteoapi_dict,openweatherapi_dict,tommorowapi_dict];\nmsg.topic = \"cloud\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 440,
        "wires": [
            [
                "8fce24e929f52d06"
            ]
        ]
    },
    {
        "id": "a44e81c24ab2ed83",
        "type": "join",
        "z": "1c1d09cb50197133",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1830,
        "y": 320,
        "wires": [
            [
                "445ca5f07bd03145",
                "cbbf2eeb493ddddd"
            ]
        ]
    },
    {
        "id": "0c475f2f2b341f84",
        "type": "function",
        "z": "1c1d09cb50197133",
        "name": "Returns only openweathermap",
        "func": "var max_date = Math.max(Date.parse(msg.payload['weatherapi']['current']['last_updated']), Date.parse(msg.payload['openmeteoapi']['current_weather']['time']), Date.parse(msg.payload['tommorowapi']['data']['time']), msg.payload['openweather']['dt'] * 1000);\n\nconsole.log(\"DATE DEBUGGING =================== \");\nconsole.log(\"WEATHER_API:\"+Date.parse(msg.payload['weatherapi']['current']['last_updated']));\nconsole.log(\"OPENMETEO_API:\"+Date.parse(msg.payload['openmeteoapi']['current_weather']['time']));\nconsole.log(\"TOMMOROW_API:\"+Date.parse(msg.payload['tommorowapi']['data']['time']));\nconsole.log(\"OPENWEATHERMAP:\"+msg.payload['openweather']['dt'] * 1000);\n\nvar open = msg.payload[\"openweather\"];\nopen['dt'] = max_date;\nmsg.payload = {};\nmsg.payload = open;\nmsg.topic = \"openweather\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 100,
        "wires": [
            [
                "a44e81c24ab2ed83"
            ]
        ]
    },
    {
        "id": "445ca5f07bd03145",
        "type": "function",
        "z": "1c1d09cb50197133",
        "name": "Puts avg data in Openweather map Template",
        "func": "var payload = msg.payload['data'];\n// var openweathermap = msg.payload['openweather'];\nvar openweathermap = {};\nopenweathermap['main'] = {};\nopenweathermap['visibility'] = {};\nopenweathermap['wind'] = {};\nopenweathermap['clouds'] = {};\nopenweathermap['coord'] = msg.payload['openweather']['coord'];\nopenweathermap['weather'] = msg.payload['openweather']['weather'];\nopenweathermap['sys'] = msg.payload['openweather']['sys'];\nopenweathermap['name'] = msg.payload['openweather']['name'];\n// openweathermap['main']['temp'] = payload['temperature'];\n// openweathermap['main']['pressure'] = payload['pressure'];\n// openweathermap['main']['humidity'] = payload['humidity'];\n// openweathermap['visibility'] = payload['visibility'];\n// openweathermap['wind']['speed'] = payload['wind_speed'];\n// openweathermap['clouds']['all'] = payload['cloud'];\n// openweathermap['wind']['deg'] = payload['wind_dir'];\nopenweathermap['main']['temp'] = payload['temperature'].toFixed(2);\nopenweathermap['main']['pressure'] = payload['pressure'].toFixed(2);\nopenweathermap['main']['humidity'] = payload['humidity'].toFixed(2);\nopenweathermap['visibility'] = payload['visibility'].toFixed(2);\nopenweathermap['wind']['speed'] = payload['wind_speed'].toFixed(2);\nopenweathermap['clouds']['all'] = payload['cloud'].toFixed(2);\nopenweathermap['wind']['deg'] = payload['wind_dir'].toFixed(2);\nopenweathermap['dt'] = msg.payload['openweather']['dt'];\ndelete openweathermap.main.feels_like;\ndelete openweathermap.main.temp_min;\ndelete openweathermap.main.temp_max;\nmsg.payload = {};\nmsg.payload = openweathermap;\nmsg.topic=\"\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1850,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "5d34355f66dfb6a5",
        "type": "function",
        "z": "1c1d09cb50197133",
        "name": "Make list of winddir & dates",
        "func": "var weatherapi_dict = { \"date\": Date.parse(msg.payload['weatherapi']['current']['last_updated']), \"value\": msg.payload['weatherapi']['current']['wind_degree']};\nvar openmeteoapi_dict = { \"date\": Date.parse(msg.payload['openmeteoapi']['current_weather']['time']), \"value\": msg.payload['openmeteoapi']['current_weather']['winddirection']};\nvar tommorowapi_dict = { \"date\": Date.parse(msg.payload['tommorowapi']['data']['time']), \"value\": msg.payload['tommorowapi']['data']['values']['windDirection'] };\nvar openweatherapi_dict = { \"date\": msg.payload['openweather']['dt'] * 1000, \"value\": msg.payload['openweather']['wind']['deg']};\nmsg.payload = [weatherapi_dict,openmeteoapi_dict,openweatherapi_dict,tommorowapi_dict];\nmsg.topic = \"wind_dir\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 200,
        "wires": [
            [
                "8fce24e929f52d06"
            ]
        ]
    },
    {
        "id": "73328df888037b2c",
        "type": "inject",
        "z": "1c1d09cb50197133",
        "name": "Test Inject",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "reverse_sort",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"temperature\":[{\"value\":20,\"date\":1664515200000},{\"value\":23,\"date\":1664774400000},{\"value\":18,\"date\":1664428800000},{\"value\":25,\"date\":1664601600000},{\"value\":22,\"date\":1664688000000}],\"humidity\":[{\"value\":20,\"date\":1664515200000},{\"value\":23,\"date\":1664774400000},{\"value\":18,\"date\":1664428800000},{\"value\":25,\"date\":1664601600000},{\"value\":22,\"date\":1664688000000}]}",
        "payloadType": "json",
        "x": 1240,
        "y": 320,
        "wires": [
            [
                "fc29061da49bb908"
            ]
        ]
    },
    {
        "id": "8fce24e929f52d06",
        "type": "join",
        "z": "1c1d09cb50197133",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "7",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1230,
        "y": 360,
        "wires": [
            [
                "a566ad1ee0b041dd",
                "fc29061da49bb908"
            ]
        ]
    },
    {
        "id": "a566ad1ee0b041dd",
        "type": "debug",
        "z": "1c1d09cb50197133",
        "name": "debug 65",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1360,
        "y": 460,
        "wires": []
    },
    {
        "id": "fc29061da49bb908",
        "type": "subflow:0e5ee74342c0495d",
        "z": "1c1d09cb50197133",
        "name": "",
        "x": 1440,
        "y": 360,
        "wires": [
            [
                "b6f1d7bfaf0f6e98"
            ]
        ]
    },
    {
        "id": "cbbf2eeb493ddddd",
        "type": "debug",
        "z": "1c1d09cb50197133",
        "name": "debug 66",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1940,
        "y": 460,
        "wires": []
    },
    {
        "id": "b6f1d7bfaf0f6e98",
        "type": "change",
        "z": "1c1d09cb50197133",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "data",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1650,
        "y": 360,
        "wires": [
            [
                "a44e81c24ab2ed83"
            ]
        ]
    },
    {
        "id": "9f05e3b0da20dbb6",
        "type": "tab",
        "label": "GUI City Results",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c19e0776bba67885",
        "type": "link in",
        "z": "9f05e3b0da20dbb6",
        "name": "GUI show cities",
        "links": [
            "ca5a43528902f0c6"
        ],
        "x": 295,
        "y": 200,
        "wires": [
            [
                "12f83dfd9a5809ce"
            ]
        ]
    },
    {
        "id": "0642b7fd4213c09e",
        "type": "function",
        "z": "9f05e3b0da20dbb6",
        "name": "filter",
        "func": "var city = msg.city;\nglobal.set(\"current_city\", city);\nvar select_query = `SELECT * FROM cities_table \nJOIN weather_table ON cities_table.geonameId = weather_table.geonameId \nJOIN image_table ON cities_table.geonameId = image_table.geonameId \nWHERE cities_table.geonameId = ${city.geonameId}\n`;\nmsg.topic = select_query;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 200,
        "wires": [
            [
                "3edf3b2c8bdb61c4"
            ]
        ]
    },
    {
        "id": "3edf3b2c8bdb61c4",
        "type": "sqlite",
        "z": "9f05e3b0da20dbb6",
        "mydb": "e1b7d6f10fa6ce00",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "",
        "x": 770,
        "y": 220,
        "wires": [
            [
                "1ceedd6cbb8e04dd",
                "c272ddb23fd5fc04"
            ]
        ]
    },
    {
        "id": "1ceedd6cbb8e04dd",
        "type": "debug",
        "z": "9f05e3b0da20dbb6",
        "name": "debug 43",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 280,
        "wires": []
    },
    {
        "id": "535cfeb7205427fb",
        "type": "inject",
        "z": "9f05e3b0da20dbb6",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 420,
        "y": 120,
        "wires": [
            [
                "0642b7fd4213c09e"
            ]
        ]
    },
    {
        "id": "b870a4b418821289",
        "type": "function",
        "z": "9f05e3b0da20dbb6",
        "name": "function 23",
        "func": "try {\n    var city = msg.payload[0]; //this has all the rankings\n    city.name = city.city_name.charAt(0).toUpperCase() + city.city_name.slice(1);\n    msg.payload[0].city_name = city.name;\n    return [msg, null];\n}\ncatch(error) {\n    return [null, msg];\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 500,
        "wires": [
            [
                "34f08fe068bc6261"
            ],
            []
        ]
    },
    {
        "id": "34f08fe068bc6261",
        "type": "ui_template",
        "z": "9f05e3b0da20dbb6",
        "group": "07c2498f17a87e52",
        "name": "City Image",
        "order": 5,
        "width": "6",
        "height": "3",
        "format": "\n<h2>{{msg.payload[0].city_name}}</h2>\n<img src=\"{{msg.payload[0].web_img_url}}\" width=\"100%\" >\n<br>\n<p>{{msg.payload[0].city_summary}}</p>\n    <!-- <p>Cost of Living: {{msg.payload[0].cost_of_living}}</p>\n    <p>Startups: {{msg.payload[0].startups}}</p>\n    <p>Venture Capital: {{msg.payload[0].venture_capital}}</p>\n    <p>Travel Connectivity: {{msg.payload[0].travel_connectivity}}</p>\n    <p>Commute: {{msg.payload[0].commute}}</p>\n    <p>Business Freedom: {{msg.payload[0].business_freedom}}</p>\n    <p>Safety: {{msg.payload[0].safety}}</p>\n    <p>Healthcare: {{msg.payload[0].healthcare}}</p>\n    <p>Education: {{msg.payload[0].education}}</p>\n    <p>Environmental Quality: {{msg.payload[0].environmental_quality}}</p>\n    <p>Economy: {{msg.payload[0].economy}}</p>\n    <p>Taxation: {{msg.payload[0].taxation}}</p>\n    <p>Internet Access: {{msg.payload[0].internet_access}}</p>\n    <p>Leisure Culture: {{msg.payload[0].leisure_culture}}</p>\n    <p>Tolerance: {{msg.payload[0].tolerance}}</p>\n    <p>Outdoors: {{msg.payload[0].outdoors}}</p> -->\n    <!-- add more properties here -->\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1310,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "12f83dfd9a5809ce",
        "type": "delay",
        "z": "9f05e3b0da20dbb6",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 420,
        "y": 200,
        "wires": [
            [
                "0642b7fd4213c09e"
            ]
        ]
    },
    {
        "id": "8ed5e76ccff4c8ae",
        "type": "function",
        "z": "9f05e3b0da20dbb6",
        "name": "function 24",
        "func": "const mon = [\n    \"housing\",\n    \"cost_of_living\",\n    \"startups\",\n    \"venture_capital\",\n    \"travel_connectivity\",\n    \"commute\",\n    \"business_freedom\",\n    \"safety\",\n    \"healthcare\",\n    \"education\",\n    \"environmental_quality\",\n    \"economy\",\n    \"taxation\",\n    \"internet_access\",\n    \"leisure_culture\",\n    \"tolerance\",\n    \"outdoors\"\n]\n\ntry {\n    var city = msg.payload[0];\n    var rankings = {};\n    for (var i = 0; i < mon.length; i++) {\n        var attr = mon[i];\n        var value = parseFloat(city[attr]).toFixed(2);\n        if (value !== \"0.00\") {\n            rankings[attr] = value;\n        }\n    }\n    let labels = Object.keys(rankings);\n    let data = Object.values(rankings);\n    msg.payload = [{\n        \"series\": [\"rank\"],\n        \"data\": [data],\n        \"labels\": labels\n    }];\n    msg.payload[0].labels = msg.payload[0].labels.map(label => label.charAt(0).toUpperCase() + label.slice(1));\n    return [msg, null];\n} catch(error) {\n    // do nothing\n    return [null, msg];\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 440,
        "wires": [
            [
                "d838790c66414934"
            ],
            []
        ]
    },
    {
        "id": "d838790c66414934",
        "type": "ui_chart",
        "z": "9f05e3b0da20dbb6",
        "name": "",
        "group": "07c2498f17a87e52",
        "order": 6,
        "width": 0,
        "height": 0,
        "label": "City Rankings",
        "chartType": "horizontalBar",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "10",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1300,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "5b9a4a6c6739c5b6",
        "type": "ui_chart",
        "z": "9f05e3b0da20dbb6",
        "name": "",
        "group": "07c2498f17a87e52",
        "order": 8,
        "width": 0,
        "height": 0,
        "label": "7-Day Forecast",
        "chartType": "line",
        "legend": "true",
        "xformat": "Y-M-D",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1280,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "c335ae988017b41f",
        "type": "function",
        "z": "9f05e3b0da20dbb6",
        "name": "function 25",
        "func": "var mon = [\n    \"weathercode\",\n    \"temperature\",\n    \"uv_index_max\",\n    \"uv_index_clear_sky_max\",\n    \"rain_sum\",\n    \"snowfall_sum\",\n    \"windspeed_10m_max\",\n    //\"winddirection_10m_dominant\",\n    \"shortwave_radiation_sum\"\n]\ntry {\n    var data_res = msg.payload;\n    var data = {};\n    for (var i = 0; i < mon.length; i++) {\n        data[mon[i]] = [];\n        for (var j = 0; j < data_res.length; j++) {\n            data[mon[i]].push({ \"x\": data_res[j][\"time\"], \"y\": data_res[j][mon[i]]});\n        }\n    }\n\n    // console.log(data);\n    let labels = Object.keys(data);\n    let values = Object.values(data);\n    // console.log(values);\n\n    msg.payload = [{\n        // \"series\": [\"A\", \"B\", \"C\"], // names - labels\n        \"series\": labels,\n        // data -> the enviroment forecast. x = date and y = value -> should be in the same order as series.\n        // \"data\": [\n        //     [{ \"x\": \"2023-04-30\", \"y\": 5 }, { \"x\": \"2023-05-01\", \"y\": 4 }, { \"x\": \"2023-05-02\", \"y\": 2 }],\n        //     [{ \"x\": \"2023-04-30\", \"y\": 6 }, { \"x\": \"2023-05-01\", \"y\": 7 }, { \"x\": \"2023-05-02\", \"y\": 6 }],\n        //     [{ \"x\": \"2023-04-30\", \"y\": 7 }, { \"x\": \"2023-05-01\", \"y\": 7 }, { \"x\": \"2023-05-02\", \"y\": 7 }]\n        // ],\n        \"data\": values,\n        \"labels\": [\"\"]\n    }]\n    return [msg, null];\n} catch(error) {\n    // do nothing.\n    return [null, msg];\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 300,
        "wires": [
            [
                "5b9a4a6c6739c5b6"
            ]
        ]
    },
    {
        "id": "62094c7fb0071670",
        "type": "ui_button",
        "z": "9f05e3b0da20dbb6",
        "name": "",
        "group": "07c2498f17a87e52",
        "order": 3,
        "width": "3",
        "height": "1",
        "passthru": false,
        "label": "Previous",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "false",
        "payloadType": "bool",
        "topic": "topic",
        "topicType": "msg",
        "x": 400,
        "y": 320,
        "wires": [
            [
                "663f028e003165c7",
                "3a999d46a5b403fd"
            ]
        ]
    },
    {
        "id": "25be65b92efa5fa3",
        "type": "ui_button",
        "z": "9f05e3b0da20dbb6",
        "name": "",
        "group": "07c2498f17a87e52",
        "order": 4,
        "width": "3",
        "height": "1",
        "passthru": false,
        "label": "Next",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "topic",
        "topicType": "msg",
        "x": 390,
        "y": 380,
        "wires": [
            [
                "663f028e003165c7"
            ]
        ]
    },
    {
        "id": "ca93dd7578c3b87d",
        "type": "debug",
        "z": "9f05e3b0da20dbb6",
        "name": "debug 44",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 740,
        "wires": []
    },
    {
        "id": "c272ddb23fd5fc04",
        "type": "function",
        "z": "9f05e3b0da20dbb6",
        "name": "function 26",
        "func": "// Get the value of the global context with the key 'current_cities'\nvar myList = global.get('current_cities');\n\n// If the value doesn't exist, create an empty array\nif (!myList) {\n    myList = [];\n}\n\n// Check if msg.payload[0].city_name already exists in myList\nvar cityExists = myList.some(function (cityObj) {\n    return cityObj.city_name === msg.payload[0].city_name;\n});\n\n// If the city does not exist, push msg.payload to myList\nif (!cityExists) {\n    myList.push(msg.payload);\n}\n\n// Set the value of the global context with the key 'current_cities' to the updated list\nglobal.set('current_cities', myList);\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 220,
        "wires": [
            [
                "e20ea0cf49c7f940"
            ]
        ]
    },
    {
        "id": "e20ea0cf49c7f940",
        "type": "debug",
        "z": "9f05e3b0da20dbb6",
        "name": "debug 45",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 120,
        "wires": []
    },
    {
        "id": "4078a8aed78a5bee",
        "type": "function",
        "z": "9f05e3b0da20dbb6",
        "name": "function 29",
        "func": "var myList = global.get('current_cities');\nconsole.log(myList);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 40,
        "wires": [
            [
                "f871f370cd8f1af0"
            ]
        ]
    },
    {
        "id": "f871f370cd8f1af0",
        "type": "debug",
        "z": "9f05e3b0da20dbb6",
        "name": "debug 46",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 40,
        "wires": []
    },
    {
        "id": "36916df28e2e99b6",
        "type": "inject",
        "z": "9f05e3b0da20dbb6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 40,
        "wires": [
            [
                "4078a8aed78a5bee"
            ]
        ]
    },
    {
        "id": "663f028e003165c7",
        "type": "function",
        "z": "9f05e3b0da20dbb6",
        "name": "function 30",
        "func": "var counter = global.get('current_counter');\n\n// console.log(msg.payload);\n\nif(msg.payload) {   // next\n    // console.log(\"Next\");\n    counter += 1;\n} else {    // previous\n    // console.log(\"Previous\");\n    counter -= 1;\n}\n\n\nglobal.set('current_counter', counter);\n\nvar current_country = global.get(\"current_country\");\nif (current_country != \"0\") {\n    global.set(\"current_country\", \"0\");\n    msg.payload = current_country;\n    var select_query = `SELECT * FROM cities_table WHERE cities_table.country_code = \"${current_country}\"`;\n    msg.topic = select_query;\n    return [null, msg];\n}\n\n// console.log(counter);\nvar myList = global.get('current_cities');\nvar index = (counter % myList.length + myList.length) % myList.length;\n// var index = counter % myList.length;\nmsg.payload = myList[index];\nreturn [msg, null];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 400,
        "wires": [
            [
                "c335ae988017b41f",
                "8ed5e76ccff4c8ae",
                "b870a4b418821289",
                "4548393330f408ea",
                "2b41c801a034f008",
                "fa84d7456796b00a",
                "618de9f6301cc0ef"
            ],
            [
                "b1793778cd13006a"
            ]
        ]
    },
    {
        "id": "3a999d46a5b403fd",
        "type": "debug",
        "z": "9f05e3b0da20dbb6",
        "name": "debug 47",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 280,
        "wires": []
    },
    {
        "id": "b1793778cd13006a",
        "type": "sqlite",
        "z": "9f05e3b0da20dbb6",
        "mydb": "e1b7d6f10fa6ce00",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "",
        "x": 490,
        "y": 640,
        "wires": [
            [
                "e509ec5efe8a5141"
            ]
        ]
    },
    {
        "id": "e509ec5efe8a5141",
        "type": "split",
        "z": "9f05e3b0da20dbb6",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 650,
        "y": 640,
        "wires": [
            [
                "ca93dd7578c3b87d",
                "f94ea9c6d855ea50"
            ]
        ]
    },
    {
        "id": "f94ea9c6d855ea50",
        "type": "function",
        "z": "9f05e3b0da20dbb6",
        "name": "function 31",
        "func": "var city = msg.payload;\nvar select_query = `SELECT * FROM cities_table \nJOIN weather_table ON cities_table.geonameId = weather_table.geonameId \nJOIN image_table ON cities_table.geonameId = image_table.geonameId \nWHERE cities_table.geonameId = ${city.geonameId}\n`;\nmsg.topic = select_query;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 660,
        "wires": [
            [
                "eba14d4db5d98015"
            ]
        ]
    },
    {
        "id": "eba14d4db5d98015",
        "type": "sqlite",
        "z": "9f05e3b0da20dbb6",
        "mydb": "e1b7d6f10fa6ce00",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "",
        "x": 1010,
        "y": 660,
        "wires": [
            [
                "bcaf1edd7665fa9c",
                "440f320e2e564f9f"
            ]
        ]
    },
    {
        "id": "bcaf1edd7665fa9c",
        "type": "debug",
        "z": "9f05e3b0da20dbb6",
        "name": "debug 48",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1100,
        "y": 740,
        "wires": []
    },
    {
        "id": "440f320e2e564f9f",
        "type": "function",
        "z": "9f05e3b0da20dbb6",
        "name": "function 32",
        "func": "// Get the value of the global context with the key 'current_cities'\nvar myList = global.get('current_cities');\n\n// If the value doesn't exist, create an empty array\nif (!myList) {\n    myList = [];\n}\n\n// Check if msg.payload[0].city_name already exists in myList\nvar cityExists = myList.some(function (cityObj) {\n    return cityObj.city_name === msg.payload[0].city_name;\n});\n\n// If the city does not exist, push msg.payload to myList\nif (!cityExists) {\n    myList.push(msg.payload);\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "4548393330f408ea",
        "type": "function",
        "z": "9f05e3b0da20dbb6",
        "name": "function 33",
        "func": "try {\n    var city = msg.payload[0];\n    // console.log(city);\n    msg.payload = {};\n    msg.payload.name = city.city_name.charAt(0).toUpperCase() + city.city_name.slice(1);\n    msg.payload.lat = city.lat;\n    msg.payload.lon = city.lng;\n    msg.payload.iconColor = \"green\";\n    msg.payload.photoUrl = city.mob_img_url;\n    msg.payload.map_url = global.get(\"map_url\");\n    // msg.map.map_url = global.get(\"map_url\");\n    // console.log(global.get(\"map_url\"));\n    // console.log(global.get(\"username\"));\n    return [msg, null];\n} catch(error) {\n    msg.payload=\"Loading cities from API server...\";\n    return [null, msg];\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 380,
        "wires": [
            [
                "5e53a4745780c10a",
                "229b654efd98336d",
                "8176c2e290dcfc9e"
            ],
            [
                "d61f286a8cb51a08"
            ]
        ]
    },
    {
        "id": "3e95da470206c87f",
        "type": "worldmap",
        "z": "9f05e3b0da20dbb6",
        "name": "",
        "lat": "",
        "lon": "",
        "zoom": "",
        "layer": "OSMG",
        "cluster": "",
        "maxage": "",
        "usermenu": "show",
        "layers": "show",
        "panit": "false",
        "panlock": "false",
        "zoomlock": "false",
        "hiderightclick": "false",
        "coords": "none",
        "showgrid": "false",
        "showruler": "false",
        "allowFileDrop": "false",
        "path": "/worldmap",
        "overlist": "DR,CO,RA,DN,HM",
        "maplist": "OSMG,OSMC,EsriC,EsriS,EsriT,EsriDG,UKOS",
        "mapname": "",
        "mapurl": "",
        "mapopt": "",
        "mapwms": false,
        "x": 1420,
        "y": 380,
        "wires": []
    },
    {
        "id": "5e53a4745780c10a",
        "type": "debug",
        "z": "9f05e3b0da20dbb6",
        "name": "debug 49",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1400,
        "y": 300,
        "wires": []
    },
    {
        "id": "229b654efd98336d",
        "type": "ui_template",
        "z": "9f05e3b0da20dbb6",
        "group": "07c2498f17a87e52",
        "name": "Map Url",
        "order": 10,
        "width": 0,
        "height": 0,
        "format": "<h3>Map Url</h3>\n<!-- <p><a href=\"{{msg.payload.map_url}}\">{{msg.payload.map_url}}</a></p> -->\n<!-- <p><a href=\"{{msg.payload.map_url}}\">View Map Here</a></p> -->\n<p><a href=\"{{msg.payload.map_url}}\" target=\"_blank\" style=\"color:orange;\">View Map Here</a></p>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1320,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "8176c2e290dcfc9e",
        "type": "change",
        "z": "9f05e3b0da20dbb6",
        "name": "DEL URL",
        "rules": [
            {
                "t": "delete",
                "p": "payload.map_url",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1280,
        "y": 380,
        "wires": [
            [
                "3e95da470206c87f"
            ]
        ]
    },
    {
        "id": "d300af0319622dc4",
        "type": "comment",
        "z": "9f05e3b0da20dbb6",
        "name": "ImageFlow -> link out 8",
        "info": "",
        "x": 260,
        "y": 240,
        "wires": []
    },
    {
        "id": "2b41c801a034f008",
        "type": "debug",
        "z": "9f05e3b0da20dbb6",
        "name": "debug 50",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 340,
        "wires": []
    },
    {
        "id": "fa84d7456796b00a",
        "type": "function",
        "z": "9f05e3b0da20dbb6",
        "name": "function 34",
        "func": "try {\n    var city = msg.payload[0]; //this has all the rankings\n    msg.city_temperature = city.temperature;\n    msg.continent_code = city.continent_code;\n    console.log(\"CONTINENT: \"+city.continent_code);\n    msg.topic = `SELECT AVG(temperature) as avg_continent_temp from weather_table WHERE continent_code = '${city.continent_code}'`;\n    return [msg, null];\n}\ncatch (error) {\n    return [null, msg];\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 560,
        "wires": [
            [
                "0cf08afdc99df1f8",
                "70038ef5419d6b0f"
            ]
        ]
    },
    {
        "id": "0cf08afdc99df1f8",
        "type": "debug",
        "z": "9f05e3b0da20dbb6",
        "name": "debug 51",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1300,
        "y": 620,
        "wires": []
    },
    {
        "id": "70038ef5419d6b0f",
        "type": "sqlite",
        "z": "9f05e3b0da20dbb6",
        "mydb": "e1b7d6f10fa6ce00",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "",
        "x": 1310,
        "y": 560,
        "wires": [
            [
                "71470b8ff5cf02f5",
                "aa599d7c89db3859"
            ]
        ]
    },
    {
        "id": "71470b8ff5cf02f5",
        "type": "debug",
        "z": "9f05e3b0da20dbb6",
        "name": "debug 52",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1500,
        "y": 620,
        "wires": []
    },
    {
        "id": "aa599d7c89db3859",
        "type": "function",
        "z": "9f05e3b0da20dbb6",
        "name": "function 35",
        "func": "var continent_codes = { \"AF\": \"Africa\", \"NA\": \"North America\", \"OC\": \"Oceania\", \"AN\": \"Antarctica\", \"AS\": \"Asia\", \"EU\": \"Europe\", \"SA\": \"South America\" }\nvar continent = continent_codes[msg.continent_code];\nvar listing = global.get(\"foundclusters\");\nvar city_tmp = msg.city_temperature;\n\n// Check if listing is an array\nif (Array.isArray(listing)) {\n    // Find the minimum, maximum, and middle centroids\n    var centroids = listing.map(function (cluster) {\n        return cluster.centroid;\n    });\n    var lowestCentroid = Math.min(...centroids);\n    var highestCentroid = Math.max(...centroids);\n    var middleCentroid = centroids.reduce(function (acc, val) {\n        return (val !== lowestCentroid && val !== highestCentroid) ? val : acc;\n    });\n\n    // Compare city temperature with the centroids\n    if (city_tmp < lowestCentroid) {\n        msg.label = \"lower\";\n    } else if (city_tmp > highestCentroid) {\n        msg.label = \"higher\";\n    } else {\n        msg.label = \"middle\";\n    }\n} else {\n    // Handle the case when listing is not an array\n    msg.label = \"unknown\";\n}\nmsg.continent = continent;\nreturn msg;\n\n\n\n// return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 560,
        "wires": [
            [
                "17d0a91c6138b726",
                "e0af924a7d6ec7cf"
            ]
        ]
    },
    {
        "id": "17d0a91c6138b726",
        "type": "debug",
        "z": "9f05e3b0da20dbb6",
        "name": "debug 53",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1700,
        "y": 620,
        "wires": []
    },
    {
        "id": "e0af924a7d6ec7cf",
        "type": "ui_template",
        "z": "9f05e3b0da20dbb6",
        "group": "07c2498f17a87e52",
        "name": "City Temperature",
        "order": 9,
        "width": 0,
        "height": 0,
        "format": "<p>This city has <b>{{msg.label}}</b> temperature than other cities in database.</p>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1730,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "43a38379ec6b63a1",
        "type": "debug",
        "z": "9f05e3b0da20dbb6",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1490,
        "y": 120,
        "wires": []
    },
    {
        "id": "9f3ed82561692d87",
        "type": "amqp in",
        "z": "9f05e3b0da20dbb6",
        "name": "",
        "topic": "",
        "iotype": "4",
        "ioname": "test",
        "server": "4c0bc455143ee2ce",
        "x": 1150,
        "y": 140,
        "wires": [
            [
                "f58b4f7a2b1cfc6a",
                "4ba7c4f5ad0dd90d"
            ]
        ]
    },
    {
        "id": "f2c39f217e523771",
        "type": "amqp out",
        "z": "9f05e3b0da20dbb6",
        "name": "",
        "routingkey": "",
        "iotype": "0",
        "ioname": "amq.direct",
        "server": "4c0bc455143ee2ce",
        "x": 1090,
        "y": 600,
        "wires": []
    },
    {
        "id": "618de9f6301cc0ef",
        "type": "function",
        "z": "9f05e3b0da20dbb6",
        "name": "function 36",
        "func": "msg.openweathermapapi_key = global.get(\"open_weather_appid\");\nmsg.weatherapi_key = global.get(\"weatherapi_key\");\nmsg.tommorowapi_key = global.get(\"tommorowapi_key\");\ntry{\n    var city = msg.payload[0];\n    var oldCity = global.get(\"current_openweather\");\n    console.log(\"OLD CITTYYYYY\");\n    console.log(oldCity);\n    if (!oldCity || oldCity != city) {\n        if (city) {\n            global.set(\"current_openweather\", city);\n        }\n        // console.log(global.get(\"current_openweather\"));\n    }\n    msg.city = {};\n    msg.city.lat = city.lat;\n    msg.city.lng = city.lng;\n    return [msg, null];\n}\ncatch (error) {\n    var city = global.get(\"current_openweather\");\n    if (!city) {\n        return [null, msg];\n    }\n    console.log(city);\n    msg.city.lat = city.lat;\n    msg.city.lng = city.lng;\n    return [msg, null];\n}\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 580,
        "wires": [
            [
                "00617bb3224d6d0d",
                "17a0600149700cba"
            ],
            [
                "bddf9f328b7e5b72"
            ]
        ]
    },
    {
        "id": "f58b4f7a2b1cfc6a",
        "type": "function",
        "z": "9f05e3b0da20dbb6",
        "name": "function 37",
        "func": "function timedate(timestamp) {\n    var milliseconds = timestamp * 1000;\n    var date = new Date(milliseconds);\n\n    var hours = date.getHours();\n    var minutes = date.getMinutes();\n    minutes = minutes < 10 ? '0' + minutes : minutes;\n    var period = hours >= 12 ? 'PM' : 'AM';\n\n    // Convert the hours from 24-hour format to 12-hour format if needed\n    if (hours > 12) {\n        hours -= 12;\n    }\n\n    return hours + ':' + minutes + ' ' + period;\n}\n\n// function datetime(timestamp){\n//     var milliseconds = timestamp * 1000;\n//     var date = new Date(milliseconds);\n//     return \"\"+date\n// }\n\nfunction datetime(timestamp) {\n    var milliseconds = timestamp;\n    var date = new Date(milliseconds);\n    var options = { year: 'numeric', month: 'short', day: 'numeric', hour: 'numeric', minute: 'numeric', second: 'numeric', hour12: true };\n    var formattedDate = date.toLocaleString('en-US', options);\n    return formattedDate;\n}\n\ntry {\n    var json = JSON.parse(msg.payload);\n    msg.payload = json;\n    var msgs = msg.payload;\n    var sunrise = msg.payload.sys.sunrise; // Replace with your Unix timestamp\n    msg.payload.sys.sunrise = timedate(sunrise);\n    var sunset = msg.payload.sys.sunset;\n    msg.payload.sys.sunset = timedate(sunset);\n    var date = new Date();\n    var currentHour = date.toLocaleTimeString();\n    msg.payload.current_session = currentHour;\n    var description = msg.payload.weather[0].description;\n    var capitalizedDescription = description.charAt(0).toUpperCase() + description.slice(1);\n    msg.payload.weather[0].description = capitalizedDescription; // Output the capitalized description\n    var data_upd = msg.payload.dt;\n    console.log(data_upd);\n    msg.payload.dt = datetime(data_upd);\n    return [msg, null];\n} catch(error) {\n    return [null, msg]\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 140,
        "wires": [
            [
                "43a38379ec6b63a1",
                "7d8bfb8f734905d8"
            ],
            []
        ]
    },
    {
        "id": "7d8bfb8f734905d8",
        "type": "ui_template",
        "z": "9f05e3b0da20dbb6",
        "group": "07c2498f17a87e52",
        "name": "Weather Forecast",
        "order": 7,
        "width": 0,
        "height": 0,
        "format": "<!DOCTYPE html>\n<html>\n\n<head>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 0;\n            padding: 20px;\n        }\n\n        .container {\n            max-width: 600px;\n            margin: 0 auto;\n            border-radius: 5px;\n            padding: 20px;\n            box-shadow: 0 5px 12px rgba(0, 0, 0, 0.8);\n        }\n\n        h3 {\n            font-size: 24px;\n            margin-top: 0;\n        }\n\n        .weather-container {\n            display: flex;\n            align-items: center;\n            margin-bottom: 20px;\n        }\n\n        .weather-icon {\n            width: 40px;\n            height: 40px;\n            vertical-align: middle;\n            margin-right: 10px;\n        }\n\n        .weather-info {\n            display: flex;\n            flex-direction: column;\n        }\n\n        p {\n            margin: 5px 0;\n        }\n\n        strong {\n            font-weight: bold;\n        }\n    </style>\n</head>\n\n<body>\n    <div class=\"container\">\n        <h3>Current Weather Forecast</h3>\n        <div class=\"weather-container\">\n            <img src=\"https://openweathermap.org/img/w/{{msg.payload.weather[0].icon}}.png\" class=\"weather-icon\">\n            <div class=\"weather-info\">\n                <p><strong>Current Weather:</strong> {{msg.payload.weather[0].main}}</p>\n                <p><strong>Weather Description:</strong> {{msg.payload.weather[0].description}}.</p>\n                <p><strong>Temperature:</strong> {{msg.payload.main.temp}}°C</p>\n            </div>\n        </div>\n        <p><strong>Sunrise Hour:</strong> {{msg.payload.sys.sunrise}}</p>\n        <p><strong>Sunset Hour:</strong> {{msg.payload.sys.sunset}}</p>\n        <p><strong>Clouds percentage:</strong> {{msg.payload.clouds.all}}%</p>\n        <p><strong>Humidity:</strong> {{msg.payload.main.humidity}}%</p>\n        <p><strong>Wind Speed:</strong> {{msg.payload.wind.speed}}m/s</p>\n        <p><strong>Wind Degree:</strong> {{msg.payload.wind.deg}}°</p>\n        <p><strong>Visibility:</strong> {{msg.payload.visibility}} meters</p>\n        <p><strong>Last API Call:</strong> {{msg.payload.current_session}}</p>\n        <p><strong>Last Data Update:</strong> {{msg.payload.dt}}</p>\n        <br>\n        <p style=\"font-size: smaller;\">* All time indicators are converted to local time.</p>\n    </div>\n</body>\n\n</html>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1530,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "cff642998f0625d8",
        "type": "inject",
        "z": "9f05e3b0da20dbb6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 370,
        "y": 520,
        "wires": [
            [
                "618de9f6301cc0ef"
            ]
        ]
    },
    {
        "id": "00617bb3224d6d0d",
        "type": "debug",
        "z": "9f05e3b0da20dbb6",
        "name": "debug 56",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 500,
        "wires": []
    },
    {
        "id": "d61f286a8cb51a08",
        "type": "ui_toast",
        "z": "9f05e3b0da20dbb6",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 1610,
        "y": 440,
        "wires": []
    },
    {
        "id": "17a0600149700cba",
        "type": "subflow:1c1d09cb50197133",
        "z": "9f05e3b0da20dbb6",
        "name": "",
        "x": 840,
        "y": 600,
        "wires": [
            [
                "f2c39f217e523771",
                "1fea50d218e2731e"
            ]
        ]
    },
    {
        "id": "4ba7c4f5ad0dd90d",
        "type": "debug",
        "z": "9f05e3b0da20dbb6",
        "name": "debug 68",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1240,
        "y": 60,
        "wires": []
    },
    {
        "id": "1fea50d218e2731e",
        "type": "debug",
        "z": "9f05e3b0da20dbb6",
        "name": "debug 69",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 540,
        "wires": []
    },
    {
        "id": "bddf9f328b7e5b72",
        "type": "debug",
        "z": "9f05e3b0da20dbb6",
        "name": "debug 71",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 720,
        "wires": []
    },
    {
        "id": "e1b7d6f10fa6ce00",
        "type": "sqlitedb",
        "db": "/tmp/cities.db",
        "mode": "RWC"
    },
    {
        "id": "07c2498f17a87e52",
        "type": "ui_group",
        "name": "App",
        "tab": "827648a1f0835a07",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "4c0bc455143ee2ce",
        "type": "amqp-server",
        "host": "localhost",
        "port": "5672",
        "vhost": "testing",
        "keepalive": "30",
        "usetls": false,
        "verifyservercert": true,
        "useca": false,
        "ca": "",
        "usetopology": false,
        "topology": "{\n\t\"exchanges\": [\n\t\t{\"name\": \"exchange1\", \"type\": \"direct\", \"options\": {\"durable\": false}},\n\t\t{\"name\": \"exchange2\"}\n\t],\n\t\"queues\": [\n\t\t{\"name\": \"queue1\", \"options\": {\"messageTtl\": 60000}},\n\t\t{\"name\": \"queue2\"}\n\t],\n\t\"bindings\": [\n\t\t{\"source\": \"exchange1\", \"queue\": \"queue1\", \"pattern\": \"debug\", \"args\": {}},\n\t\t{\"source\": \"exchange1\", \"exchange\": \"exchange2\", \"pattern\": \"error\"},\n\t\t{\"source\": \"exchange2\", \"queue\": \"queue2\"}\n\t]\n}"
    },
    {
        "id": "827648a1f0835a07",
        "type": "ui_tab",
        "name": "Smart City App",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    }
]