[
    {
        "id": "7060e58fbf213bbf",
        "type": "tab",
        "label": "GUI City Results",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "5ec4ffd97486bed2",
        "type": "link in",
        "z": "7060e58fbf213bbf",
        "name": "GUI show cities",
        "links": [
            "10883a20c66933e5"
        ],
        "x": 295,
        "y": 200,
        "wires": [
            [
                "14ef99789a30a2cd"
            ]
        ]
    },
    {
        "id": "5795622c2d8f8f53",
        "type": "function",
        "z": "7060e58fbf213bbf",
        "name": "filter",
        "func": "var city = msg.city;\nvar select_query = `SELECT * FROM cities_table \nJOIN weather_table ON cities_table.geonameId = weather_table.geonameId \nJOIN image_table ON cities_table.geonameId = image_table.geonameId \nWHERE cities_table.geonameId = ${city.geonameId}\n`;\nmsg.topic = select_query;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 200,
        "wires": [
            [
                "f2e833ded6258815"
            ]
        ]
    },
    {
        "id": "f2e833ded6258815",
        "type": "sqlite",
        "z": "7060e58fbf213bbf",
        "mydb": "e1b7d6f10fa6ce00",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "",
        "x": 770,
        "y": 220,
        "wires": [
            [
                "2f11a2dfa06bc0de",
                "c3818e1746fa1ed0"
            ]
        ]
    },
    {
        "id": "2f11a2dfa06bc0de",
        "type": "debug",
        "z": "7060e58fbf213bbf",
        "name": "debug 43",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 280,
        "wires": []
    },
    {
        "id": "4fec08091508f758",
        "type": "inject",
        "z": "7060e58fbf213bbf",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 420,
        "y": 120,
        "wires": [
            [
                "5795622c2d8f8f53"
            ]
        ]
    },
    {
        "id": "979bb91840362059",
        "type": "function",
        "z": "7060e58fbf213bbf",
        "name": "function 23",
        "func": "try {\n    var city = msg.payload[0]; //this has all the rankings\n    city.name = city.city_name.charAt(0).toUpperCase() + city.city_name.slice(1);\n    msg.payload[0].city_name = city.name;\n    return [msg, null];\n}\ncatch(error) {\n    return [null, msg];\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 500,
        "wires": [
            [
                "b2cd2bd8921d66ae"
            ],
            []
        ]
    },
    {
        "id": "b2cd2bd8921d66ae",
        "type": "ui_template",
        "z": "7060e58fbf213bbf",
        "group": "07c2498f17a87e52",
        "name": "City Image",
        "order": 5,
        "width": "6",
        "height": "3",
        "format": "\n<h2>{{msg.payload[0].city_name}}</h2>\n<img src=\"{{msg.payload[0].web_img_url}}\" width=\"100%\" >\n<br>\n<p>{{msg.payload[0].city_summary}}</p>\n    <!-- <p>Cost of Living: {{msg.payload[0].cost_of_living}}</p>\n    <p>Startups: {{msg.payload[0].startups}}</p>\n    <p>Venture Capital: {{msg.payload[0].venture_capital}}</p>\n    <p>Travel Connectivity: {{msg.payload[0].travel_connectivity}}</p>\n    <p>Commute: {{msg.payload[0].commute}}</p>\n    <p>Business Freedom: {{msg.payload[0].business_freedom}}</p>\n    <p>Safety: {{msg.payload[0].safety}}</p>\n    <p>Healthcare: {{msg.payload[0].healthcare}}</p>\n    <p>Education: {{msg.payload[0].education}}</p>\n    <p>Environmental Quality: {{msg.payload[0].environmental_quality}}</p>\n    <p>Economy: {{msg.payload[0].economy}}</p>\n    <p>Taxation: {{msg.payload[0].taxation}}</p>\n    <p>Internet Access: {{msg.payload[0].internet_access}}</p>\n    <p>Leisure Culture: {{msg.payload[0].leisure_culture}}</p>\n    <p>Tolerance: {{msg.payload[0].tolerance}}</p>\n    <p>Outdoors: {{msg.payload[0].outdoors}}</p> -->\n    <!-- add more properties here -->\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1310,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "14ef99789a30a2cd",
        "type": "delay",
        "z": "7060e58fbf213bbf",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 420,
        "y": 200,
        "wires": [
            [
                "5795622c2d8f8f53"
            ]
        ]
    },
    {
        "id": "5ab3f3b0ebba614c",
        "type": "function",
        "z": "7060e58fbf213bbf",
        "name": "function 24",
        "func": "const mon = [\n    \"housing\",\n    \"cost_of_living\",\n    \"startups\",\n    \"venture_capital\",\n    \"travel_connectivity\",\n    \"commute\",\n    \"business_freedom\",\n    \"safety\",\n    \"healthcare\",\n    \"education\",\n    \"environmental_quality\",\n    \"economy\",\n    \"taxation\",\n    \"internet_access\",\n    \"leisure_culture\",\n    \"tolerance\",\n    \"outdoors\"\n]\n\ntry {\n    var city = msg.payload[0];\n    var rankings = {};\n    for (var i = 0; i < mon.length; i++) {\n        var attr = mon[i];\n        var value = parseFloat(city[attr]).toFixed(2);\n        if (value !== \"0.00\") {\n            rankings[attr] = value;\n        }\n    }\n    let labels = Object.keys(rankings);\n    let data = Object.values(rankings);\n    msg.payload = [{\n        \"series\": [\"rank\"],\n        \"data\": [data],\n        \"labels\": labels\n    }];\n    msg.payload[0].labels = msg.payload[0].labels.map(label => label.charAt(0).toUpperCase() + label.slice(1));\n    return [msg, null];\n} catch(error) {\n    // do nothing\n    return [null, msg];\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 440,
        "wires": [
            [
                "fc1b3bd5dfb83dca"
            ],
            []
        ]
    },
    {
        "id": "fc1b3bd5dfb83dca",
        "type": "ui_chart",
        "z": "7060e58fbf213bbf",
        "name": "",
        "group": "07c2498f17a87e52",
        "order": 6,
        "width": 0,
        "height": 0,
        "label": "City Rankings",
        "chartType": "horizontalBar",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "10",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1300,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "f58292f93ac6211b",
        "type": "ui_chart",
        "z": "7060e58fbf213bbf",
        "name": "",
        "group": "07c2498f17a87e52",
        "order": 8,
        "width": 0,
        "height": 0,
        "label": "7-Day Forecast",
        "chartType": "line",
        "legend": "true",
        "xformat": "Y-M-D",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1280,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "3208ba9c0c132e25",
        "type": "function",
        "z": "7060e58fbf213bbf",
        "name": "function 25",
        "func": "var mon = [\n    \"weathercode\",\n    \"temperature\",\n    \"uv_index_max\",\n    \"uv_index_clear_sky_max\",\n    \"rain_sum\",\n    \"snowfall_sum\",\n    \"windspeed_10m_max\",\n    //\"winddirection_10m_dominant\",\n    \"shortwave_radiation_sum\"\n]\ntry {\n    var data_res = msg.payload;\n    var data = {};\n    for (var i = 0; i < mon.length; i++) {\n        data[mon[i]] = [];\n        for (var j = 0; j < data_res.length; j++) {\n            data[mon[i]].push({ \"x\": data_res[j][\"time\"], \"y\": data_res[j][mon[i]]});\n        }\n    }\n\n    // console.log(data);\n    let labels = Object.keys(data);\n    let values = Object.values(data);\n    // console.log(values);\n\n    msg.payload = [{\n        // \"series\": [\"A\", \"B\", \"C\"], // names - labels\n        \"series\": labels,\n        // data -> the enviroment forecast. x = date and y = value -> should be in the same order as series.\n        // \"data\": [\n        //     [{ \"x\": \"2023-04-30\", \"y\": 5 }, { \"x\": \"2023-05-01\", \"y\": 4 }, { \"x\": \"2023-05-02\", \"y\": 2 }],\n        //     [{ \"x\": \"2023-04-30\", \"y\": 6 }, { \"x\": \"2023-05-01\", \"y\": 7 }, { \"x\": \"2023-05-02\", \"y\": 6 }],\n        //     [{ \"x\": \"2023-04-30\", \"y\": 7 }, { \"x\": \"2023-05-01\", \"y\": 7 }, { \"x\": \"2023-05-02\", \"y\": 7 }]\n        // ],\n        \"data\": values,\n        \"labels\": [\"\"]\n    }]\n    return [msg, null];\n} catch(error) {\n    // do nothing.\n    return [null, msg];\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 300,
        "wires": [
            [
                "f58292f93ac6211b"
            ]
        ]
    },
    {
        "id": "74c7c683db787813",
        "type": "ui_button",
        "z": "7060e58fbf213bbf",
        "name": "",
        "group": "07c2498f17a87e52",
        "order": 3,
        "width": "3",
        "height": "1",
        "passthru": false,
        "label": "Previous",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "false",
        "payloadType": "bool",
        "topic": "topic",
        "topicType": "msg",
        "x": 400,
        "y": 320,
        "wires": [
            [
                "4d5690f9b2ebbd78",
                "fbfdce8b2d5c21f1"
            ]
        ]
    },
    {
        "id": "c3754a5e43854b22",
        "type": "ui_button",
        "z": "7060e58fbf213bbf",
        "name": "",
        "group": "07c2498f17a87e52",
        "order": 4,
        "width": "3",
        "height": "1",
        "passthru": false,
        "label": "Next",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "topic",
        "topicType": "msg",
        "x": 390,
        "y": 380,
        "wires": [
            [
                "4d5690f9b2ebbd78"
            ]
        ]
    },
    {
        "id": "74df857958fc7dca",
        "type": "debug",
        "z": "7060e58fbf213bbf",
        "name": "debug 44",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 740,
        "wires": []
    },
    {
        "id": "c3818e1746fa1ed0",
        "type": "function",
        "z": "7060e58fbf213bbf",
        "name": "function 26",
        "func": "// Get the value of the global context with the key 'current_cities'\nvar myList = global.get('current_cities');\n\n// If the value doesn't exist, create an empty array\nif (!myList) {\n    myList = [];\n}\n\n// Check if msg.payload[0].city_name already exists in myList\nvar cityExists = myList.some(function (cityObj) {\n    return cityObj.city_name === msg.payload[0].city_name;\n});\n\n// If the city does not exist, push msg.payload to myList\nif (!cityExists) {\n    myList.push(msg.payload);\n}\n\n// Set the value of the global context with the key 'current_cities' to the updated list\nglobal.set('current_cities', myList);\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 220,
        "wires": [
            [
                "344a2586cee0638a"
            ]
        ]
    },
    {
        "id": "344a2586cee0638a",
        "type": "debug",
        "z": "7060e58fbf213bbf",
        "name": "debug 45",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 120,
        "wires": []
    },
    {
        "id": "dc782356fcf202ed",
        "type": "function",
        "z": "7060e58fbf213bbf",
        "name": "function 29",
        "func": "var myList = global.get('current_cities');\nconsole.log(myList);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 40,
        "wires": [
            [
                "d8368cfba462098c"
            ]
        ]
    },
    {
        "id": "d8368cfba462098c",
        "type": "debug",
        "z": "7060e58fbf213bbf",
        "name": "debug 46",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 40,
        "wires": []
    },
    {
        "id": "57017403272d10b9",
        "type": "inject",
        "z": "7060e58fbf213bbf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 40,
        "wires": [
            [
                "dc782356fcf202ed"
            ]
        ]
    },
    {
        "id": "4d5690f9b2ebbd78",
        "type": "function",
        "z": "7060e58fbf213bbf",
        "name": "function 30",
        "func": "var counter = global.get('current_counter');\n\n// console.log(msg.payload);\n\nif(msg.payload) {   // next\n    // console.log(\"Next\");\n    counter += 1;\n} else {    // previous\n    // console.log(\"Previous\");\n    counter -= 1;\n}\n\n\nglobal.set('current_counter', counter);\n\nvar current_country = global.get(\"current_country\");\nif (current_country != \"0\") {\n    global.set(\"current_country\", \"0\");\n    msg.payload = current_country;\n    var select_query = `SELECT * FROM cities_table WHERE cities_table.country_code = \"${current_country}\"`;\n    msg.topic = select_query;\n    return [null, msg];\n}\n\n// console.log(counter);\nvar myList = global.get('current_cities');\nvar index = (counter % myList.length + myList.length) % myList.length;\n// var index = counter % myList.length;\nmsg.payload = myList[index];\nreturn [msg, null];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 400,
        "wires": [
            [
                "3208ba9c0c132e25",
                "5ab3f3b0ebba614c",
                "979bb91840362059",
                "75d7babc565b916a",
                "6d72430d2ff2addb",
                "3f2dd59a3e22fcd3",
                "8b19190891115d50"
            ],
            [
                "3c6645edc2f7ec43"
            ]
        ]
    },
    {
        "id": "fbfdce8b2d5c21f1",
        "type": "debug",
        "z": "7060e58fbf213bbf",
        "name": "debug 47",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 280,
        "wires": []
    },
    {
        "id": "3c6645edc2f7ec43",
        "type": "sqlite",
        "z": "7060e58fbf213bbf",
        "mydb": "e1b7d6f10fa6ce00",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "",
        "x": 490,
        "y": 640,
        "wires": [
            [
                "72b9e93ef5633496"
            ]
        ]
    },
    {
        "id": "72b9e93ef5633496",
        "type": "split",
        "z": "7060e58fbf213bbf",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 650,
        "y": 640,
        "wires": [
            [
                "74df857958fc7dca",
                "af7a5a9d1bd47dbf"
            ]
        ]
    },
    {
        "id": "af7a5a9d1bd47dbf",
        "type": "function",
        "z": "7060e58fbf213bbf",
        "name": "function 31",
        "func": "var city = msg.payload;\nvar select_query = `SELECT * FROM cities_table \nJOIN weather_table ON cities_table.geonameId = weather_table.geonameId \nJOIN image_table ON cities_table.geonameId = image_table.geonameId \nWHERE cities_table.geonameId = ${city.geonameId}\n`;\nmsg.topic = select_query;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 660,
        "wires": [
            [
                "f0ae58224b846fba"
            ]
        ]
    },
    {
        "id": "f0ae58224b846fba",
        "type": "sqlite",
        "z": "7060e58fbf213bbf",
        "mydb": "e1b7d6f10fa6ce00",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "",
        "x": 1010,
        "y": 660,
        "wires": [
            [
                "3022a9d9372b1444",
                "de7e68bfde2d8d6f"
            ]
        ]
    },
    {
        "id": "3022a9d9372b1444",
        "type": "debug",
        "z": "7060e58fbf213bbf",
        "name": "debug 48",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1100,
        "y": 740,
        "wires": []
    },
    {
        "id": "de7e68bfde2d8d6f",
        "type": "function",
        "z": "7060e58fbf213bbf",
        "name": "function 32",
        "func": "// Get the value of the global context with the key 'current_cities'\nvar myList = global.get('current_cities');\n\n// If the value doesn't exist, create an empty array\nif (!myList) {\n    myList = [];\n}\n\n// Check if msg.payload[0].city_name already exists in myList\nvar cityExists = myList.some(function (cityObj) {\n    return cityObj.city_name === msg.payload[0].city_name;\n});\n\n// If the city does not exist, push msg.payload to myList\nif (!cityExists) {\n    myList.push(msg.payload);\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "75d7babc565b916a",
        "type": "function",
        "z": "7060e58fbf213bbf",
        "name": "function 33",
        "func": "try {\n    var city = msg.payload[0];\n    // console.log(city);\n    msg.payload = {};\n    msg.payload.name = city.city_name.charAt(0).toUpperCase() + city.city_name.slice(1);\n    msg.payload.lat = city.lat;\n    msg.payload.lon = city.lng;\n    msg.payload.iconColor = \"green\";\n    msg.payload.photoUrl = city.mob_img_url;\n    msg.payload.map_url = global.get(\"map_url\");\n    // msg.map.map_url = global.get(\"map_url\");\n    // console.log(global.get(\"map_url\"));\n    // console.log(global.get(\"username\"));\n    return [msg, null];\n} catch(error) {\n    msg.payload=\"Loading cities from API server...\";\n    return [null, msg];\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 380,
        "wires": [
            [
                "72d551b97c74682d",
                "c688a42f08b02db0",
                "50be040b247189c9"
            ],
            [
                "3dc04297c9daa998"
            ]
        ]
    },
    {
        "id": "0804dced2fac30c8",
        "type": "worldmap",
        "z": "7060e58fbf213bbf",
        "name": "",
        "lat": "",
        "lon": "",
        "zoom": "",
        "layer": "OSMG",
        "cluster": "",
        "maxage": "",
        "usermenu": "show",
        "layers": "show",
        "panit": "false",
        "panlock": "false",
        "zoomlock": "false",
        "hiderightclick": "false",
        "coords": "none",
        "showgrid": "false",
        "showruler": "false",
        "allowFileDrop": "false",
        "path": "/worldmap",
        "overlist": "DR,CO,RA,DN,HM",
        "maplist": "OSMG,OSMC,EsriC,EsriS,EsriT,EsriDG,UKOS",
        "mapname": "",
        "mapurl": "",
        "mapopt": "",
        "mapwms": false,
        "x": 1420,
        "y": 380,
        "wires": []
    },
    {
        "id": "72d551b97c74682d",
        "type": "debug",
        "z": "7060e58fbf213bbf",
        "name": "debug 49",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1400,
        "y": 300,
        "wires": []
    },
    {
        "id": "c688a42f08b02db0",
        "type": "ui_template",
        "z": "7060e58fbf213bbf",
        "group": "07c2498f17a87e52",
        "name": "Map Url",
        "order": 10,
        "width": 0,
        "height": 0,
        "format": "<h3>Map Url</h3>\n<!-- <p><a href=\"{{msg.payload.map_url}}\">{{msg.payload.map_url}}</a></p> -->\n<!-- <p><a href=\"{{msg.payload.map_url}}\">View Map Here</a></p> -->\n<p><a href=\"{{msg.payload.map_url}}\" target=\"_blank\" style=\"color:orange;\">View Map Here</a></p>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1320,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "50be040b247189c9",
        "type": "change",
        "z": "7060e58fbf213bbf",
        "name": "DEL URL",
        "rules": [
            {
                "t": "delete",
                "p": "payload.map_url",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1280,
        "y": 380,
        "wires": [
            [
                "0804dced2fac30c8"
            ]
        ]
    },
    {
        "id": "fce2d648c0aadddd",
        "type": "comment",
        "z": "7060e58fbf213bbf",
        "name": "ImageFlow -> link out 8",
        "info": "",
        "x": 260,
        "y": 240,
        "wires": []
    },
    {
        "id": "6d72430d2ff2addb",
        "type": "debug",
        "z": "7060e58fbf213bbf",
        "name": "debug 50",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 340,
        "wires": []
    },
    {
        "id": "3f2dd59a3e22fcd3",
        "type": "function",
        "z": "7060e58fbf213bbf",
        "name": "function 34",
        "func": "try {\n    var city = msg.payload[0]; //this has all the rankings\n    msg.city_temperature = city.temperature;\n    msg.continent_code = city.continent_code;\n    console.log(\"CONTINENT: \"+city.continent_code);\n    msg.topic = `SELECT AVG(temperature) as avg_continent_temp from weather_table WHERE continent_code = '${city.continent_code}'`;\n    return [msg, null];\n}\ncatch (error) {\n    return [null, msg];\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 560,
        "wires": [
            [
                "d7bd0468b06c067c",
                "7f82d7646fc1d11a"
            ]
        ]
    },
    {
        "id": "d7bd0468b06c067c",
        "type": "debug",
        "z": "7060e58fbf213bbf",
        "name": "debug 51",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1300,
        "y": 620,
        "wires": []
    },
    {
        "id": "7f82d7646fc1d11a",
        "type": "sqlite",
        "z": "7060e58fbf213bbf",
        "mydb": "e1b7d6f10fa6ce00",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "",
        "x": 1310,
        "y": 560,
        "wires": [
            [
                "919251de684f946b",
                "f1294a516a6a752c"
            ]
        ]
    },
    {
        "id": "919251de684f946b",
        "type": "debug",
        "z": "7060e58fbf213bbf",
        "name": "debug 52",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1500,
        "y": 620,
        "wires": []
    },
    {
        "id": "f1294a516a6a752c",
        "type": "function",
        "z": "7060e58fbf213bbf",
        "name": "function 35",
        "func": "var continent_codes = { \"AF\": \"Africa\", \"NA\": \"North America\", \"OC\": \"Oceania\", \"AN\": \"Antarctica\", \"AS\": \"Asia\", \"EU\": \"Europe\", \"SA\": \"South America\" }\n\n// var avg_tmp = msg.payload[0].avg_continent_temp;\nvar avg_tmp = parseFloat(msg.payload[0].avg_continent_temp.toFixed(2));\nvar city_tmp = msg.city_temperature;\nvar continent = continent_codes[msg.continent_code];\nconsole.log(msg.continent_code);\n// console.log(avg_tmp+\" \"+city_tmp);\nvar s = \"\";\nif (city_tmp > avg_tmp){\n    s = \"higher\";\n    // console.log(s);\n} else if (city_tmp < avg_tmp){\n    s = \"lower\";\n    // console.log(s);\n} else {\n    s = \"same\";\n    // console.log(s);\n}\nmsg.payload = s;\nmsg.continent = continent;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 560,
        "wires": [
            [
                "9c0afd7f9518884a",
                "287e754215e529e9"
            ]
        ]
    },
    {
        "id": "9c0afd7f9518884a",
        "type": "debug",
        "z": "7060e58fbf213bbf",
        "name": "debug 53",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1700,
        "y": 620,
        "wires": []
    },
    {
        "id": "287e754215e529e9",
        "type": "ui_template",
        "z": "7060e58fbf213bbf",
        "group": "07c2498f17a87e52",
        "name": "City Temperature",
        "order": 9,
        "width": 0,
        "height": 0,
        "format": "<p>This city has <b>{{msg.payload}}</b> temperature than other cities in {{msg.continent}}.</p>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1730,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "fdc0d4446870f1c2",
        "type": "debug",
        "z": "7060e58fbf213bbf",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1490,
        "y": 120,
        "wires": []
    },
    {
        "id": "d25a077f0d7c735a",
        "type": "amqp in",
        "z": "7060e58fbf213bbf",
        "name": "",
        "topic": "",
        "iotype": "4",
        "ioname": "test",
        "server": "4c0bc455143ee2ce",
        "x": 1150,
        "y": 140,
        "wires": [
            [
                "acb7c6cb91e1688d"
            ]
        ]
    },
    {
        "id": "ce0041f749c99974",
        "type": "amqp out",
        "z": "7060e58fbf213bbf",
        "name": "",
        "routingkey": "",
        "iotype": "0",
        "ioname": "amq.direct",
        "server": "4c0bc455143ee2ce",
        "x": 1070,
        "y": 600,
        "wires": []
    },
    {
        "id": "8b19190891115d50",
        "type": "function",
        "z": "7060e58fbf213bbf",
        "name": "function 36",
        "func": "var id = global.get(\"open_weather_appid\");\ntry{\n    var city = msg.payload[0];\n    // msg.url = `https://api.openweathermap.org/data/2.5/weather?q=${city.city_name},${city.country_code}&APPID=${id}&units=metric`;\n    msg.url = `https://api.openweathermap.org/data/2.5/weather?lat=${city.lat}&lon=${city.lng}&appid=${id}&units=metric`;\n    var oldCity = global.get(\"current_openweather\");\n    if (!oldCity || oldCity != city) {\n        global.set(\"current_openweather\", city);\n    }\n    return [msg, null];\n}\ncatch (error) {\n    \n    var city = global.get(\"current_openweather\");\n    if (!city) {\n        return [null, msg];\n    }\n    msg.url = `https://api.openweathermap.org/data/2.5/weather?q=${city.city_name},${city.country_code}&APPID=${id}&units=metric`;\n    return [msg, null];\n}\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 580,
        "wires": [
            [
                "e0aa61e6a0660e7f",
                "f6c5d4e43f724c8e"
            ],
            []
        ]
    },
    {
        "id": "e0aa61e6a0660e7f",
        "type": "http request",
        "z": "7060e58fbf213bbf",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 870,
        "y": 600,
        "wires": [
            [
                "ce0041f749c99974"
            ]
        ]
    },
    {
        "id": "acb7c6cb91e1688d",
        "type": "function",
        "z": "7060e58fbf213bbf",
        "name": "function 37",
        "func": "function timedate(timestamp) {\n    var milliseconds = timestamp * 1000;\n    var date = new Date(milliseconds);\n\n    var hours = date.getHours();\n    var minutes = date.getMinutes();\n    minutes = minutes < 10 ? '0' + minutes : minutes;\n    var period = hours >= 12 ? 'PM' : 'AM';\n\n    // Convert the hours from 24-hour format to 12-hour format if needed\n    if (hours > 12) {\n        hours -= 12;\n    }\n\n    return hours + ':' + minutes + ' ' + period;\n}\n\n// function datetime(timestamp){\n//     var milliseconds = timestamp * 1000;\n//     var date = new Date(milliseconds);\n//     return \"\"+date\n// }\n\nfunction datetime(timestamp) {\n    var milliseconds = timestamp * 1000;\n    var date = new Date(milliseconds);\n    var options = { year: 'numeric', month: 'short', day: 'numeric', hour: 'numeric', minute: 'numeric', second: 'numeric', hour12: true };\n    var formattedDate = date.toLocaleString('en-US', options);\n    return formattedDate;\n}\n\ntry {\n    var json = JSON.parse(msg.payload);\n    msg.payload = json;\n    var msgs = msg.payload;\n    var sunrise = msg.payload.sys.sunrise; // Replace with your Unix timestamp\n    msg.payload.sys.sunrise = timedate(sunrise);\n    var sunset = msg.payload.sys.sunset;\n    msg.payload.sys.sunset = timedate(sunset);\n    var date = new Date();\n    var currentHour = date.toLocaleTimeString();\n    msg.payload.current_session = currentHour;\n    var description = msg.payload.weather[0].description;\n    var capitalizedDescription = description.charAt(0).toUpperCase() + description.slice(1);\n    msg.payload.weather[0].description = capitalizedDescription; // Output the capitalized description\n    var data_upd = msg.payload.dt;\n    msg.payload.dt = datetime(data_upd);\n    return [msg, null];\n} catch(error) {\n    return [null, msg]\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 140,
        "wires": [
            [
                "fdc0d4446870f1c2",
                "3cb6bbd6e911576a"
            ],
            []
        ]
    },
    {
        "id": "3cb6bbd6e911576a",
        "type": "ui_template",
        "z": "7060e58fbf213bbf",
        "group": "07c2498f17a87e52",
        "name": "Weather Forecast",
        "order": 7,
        "width": 0,
        "height": 0,
        "format": "<!DOCTYPE html>\n<html>\n\n<head>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 0;\n            padding: 20px;\n        }\n\n        .container {\n            max-width: 600px;\n            margin: 0 auto;\n            border-radius: 5px;\n            padding: 20px;\n            box-shadow: 0 5px 12px rgba(0, 0, 0, 0.8);\n        }\n\n        h3 {\n            font-size: 24px;\n            margin-top: 0;\n        }\n\n        .weather-container {\n            display: flex;\n            align-items: center;\n            margin-bottom: 20px;\n        }\n\n        .weather-icon {\n            width: 40px;\n            height: 40px;\n            vertical-align: middle;\n            margin-right: 10px;\n        }\n\n        .weather-info {\n            display: flex;\n            flex-direction: column;\n        }\n\n        p {\n            margin: 5px 0;\n        }\n\n        strong {\n            font-weight: bold;\n        }\n    </style>\n</head>\n\n<body>\n    <div class=\"container\">\n        <h3>Current Weather Forecast</h3>\n        <div class=\"weather-container\">\n            <img src=\"https://openweathermap.org/img/w/{{msg.payload.weather[0].icon}}.png\" class=\"weather-icon\">\n            <div class=\"weather-info\">\n                <p><strong>Current Weather:</strong> {{msg.payload.weather[0].main}}</p>\n                <p><strong>Weather Description:</strong> {{msg.payload.weather[0].description}}.</p>\n                <p><strong>Temperature:</strong> {{msg.payload.main.temp}}°C</p>\n            </div>\n        </div>\n        <p><strong>Min Temperature:</strong> {{msg.payload.main.temp_min}}°C</p>\n        <p><strong>Max Temperature:</strong> {{msg.payload.main.temp_max}}°C</p>\n        <p><strong>Sunrise Hour:</strong> {{msg.payload.sys.sunrise}}</p>\n        <p><strong>Sunset Hour:</strong> {{msg.payload.sys.sunset}}</p>\n        <p><strong>Clouds percentage:</strong> {{msg.payload.clouds.all}}%</p>\n        <p><strong>Humidity:</strong> {{msg.payload.main.humidity}}%</p>\n        <p><strong>Wind Speed:</strong> {{msg.payload.wind.speed}}m/s</p>\n        <p><strong>Wind Degree:</strong> {{msg.payload.wind.deg}}°</p>\n        <p><strong>Visibility:</strong> {{msg.payload.visibility}} meters</p>\n        <p><strong>Last API Call:</strong> {{msg.payload.current_session}}</p>\n        <p><strong>Last Data Update:</strong> {{msg.payload.dt}}</p>\n        <br>\n        <p style=\"font-size: smaller;\">* All time indicators are converted to local time.</p>\n    </div>\n</body>\n\n</html>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1530,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "d6d2aa62a3c0a601",
        "type": "inject",
        "z": "7060e58fbf213bbf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "50",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 370,
        "y": 520,
        "wires": [
            [
                "8b19190891115d50"
            ]
        ]
    },
    {
        "id": "f6c5d4e43f724c8e",
        "type": "debug",
        "z": "7060e58fbf213bbf",
        "name": "debug 56",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 500,
        "wires": []
    },
    {
        "id": "3dc04297c9daa998",
        "type": "ui_toast",
        "z": "7060e58fbf213bbf",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 1610,
        "y": 440,
        "wires": []
    },
    {
        "id": "e1b7d6f10fa6ce00",
        "type": "sqlitedb",
        "db": "/tmp/cities.db",
        "mode": "RWC"
    },
    {
        "id": "07c2498f17a87e52",
        "type": "ui_group",
        "name": "App",
        "tab": "827648a1f0835a07",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "4c0bc455143ee2ce",
        "type": "amqp-server",
        "host": "localhost",
        "port": "5672",
        "vhost": "testing",
        "keepalive": "30",
        "usetls": false,
        "verifyservercert": true,
        "useca": false,
        "ca": "",
        "usetopology": false,
        "topology": "{\n\t\"exchanges\": [\n\t\t{\"name\": \"exchange1\", \"type\": \"direct\", \"options\": {\"durable\": false}},\n\t\t{\"name\": \"exchange2\"}\n\t],\n\t\"queues\": [\n\t\t{\"name\": \"queue1\", \"options\": {\"messageTtl\": 60000}},\n\t\t{\"name\": \"queue2\"}\n\t],\n\t\"bindings\": [\n\t\t{\"source\": \"exchange1\", \"queue\": \"queue1\", \"pattern\": \"debug\", \"args\": {}},\n\t\t{\"source\": \"exchange1\", \"exchange\": \"exchange2\", \"pattern\": \"error\"},\n\t\t{\"source\": \"exchange2\", \"queue\": \"queue2\"}\n\t]\n}"
    },
    {
        "id": "827648a1f0835a07",
        "type": "ui_tab",
        "name": "Smart City App",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    }
]