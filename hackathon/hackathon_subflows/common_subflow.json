[
    {
        "id": "da362e744a99a41b",
        "type": "subflow",
        "name": "Calculate Weighted Average",
        "info": "<div>\n  <p>\n    This subflow calculates the weighted average of given values, considering the date of each value.\n    The more recent the date, the higher the value will be weighted in the average calculation.\n  </p>\n  <p>\n    It takes as input a list with the following structure (put this in the <code>msg.payload.value.data</code>):\n    <code>\n      {\n        \"attr_name1\": [\n          {\"value\": x, \"date\": y},\n          {\"value\": z, \"date\": e}\n        ],\n        \"attr_name2\": [\n          {\"value\": q, \"date\": w},\n          ...\n        ]\n      }\n    </code>\n  </p>\n  <p>\n    In the input list, each attribute (<em>attr_name1</em>, <em>attr_name2</em>, etc.) is associated with a list of dictionaries.\n    Each dictionary represents a value entry and contains two keys that should remain as is:\n  </p>\n  <ul>\n    <li><strong>\"value\"</strong>: Specifies the value of the attribute for a specific date.</li>\n    <li><strong>\"date\"</strong>: Specifies the date of the value entry. The date should be in UNIX timestamp format.</li>\n  </ul>\n  <p>\n    The subflow returns an object with keys corresponding to the attribute names specified in the input list, along with their respective weighted averages. The output can be found in <code>msg.payload.value.data</code>.\n  </p>\n  <p>\n    If you want the more old dates to have higher weight in the weighted average, set <code>msg.payload.value.reverse = True</code>.  \n  </p>\n</div>\n",
        "category": "",
        "in": [
            {
                "x": 140,
                "y": 180,
                "wires": [
                    {
                        "id": "d8e9daa2c8509009"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 780,
                "y": 180,
                "wires": [
                    {
                        "id": "a305889cee5bf6fb",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "a305889cee5bf6fb",
        "type": "function",
        "z": "da362e744a99a41b",
        "name": "Calculate Weighted Average",
        "func": "// function conv_date(unixTime){\n//     // Create a new Date object by multiplying the Unix timestamp by 1000 to convert it to milliseconds\n//     const date = new Date(unixTime);\n\n//     // Extract the various components of the date and time\n//     const year = date.getFullYear();\n//     const month = date.getMonth() + 1; // Months are zero-based, so add 1\n//     const day = date.getDate();\n//     const hours = date.getHours();\n//     const minutes = date.getMinutes();\n//     const seconds = date.getSeconds();\n\n//     // Create a formatted date and time string\n//     return `${year}-${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')} ${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n\n// }\n\nfunction calc_weight_avg(list) {\n    // Calculate total weight and weighted sum\n    let totalWeight = 0;\n    let weightedSum = 0;\n\n    list.forEach((temperature, index) => {\n        const weight = index + 1;\n        // Used for debugging:\n        // console.log(conv_date(temperature.date) + \": \" + weight);\n        weightedSum += temperature.value * weight;\n        totalWeight += weight;\n    });\n\n    const weightedAverage = weightedSum / totalWeight;\n    return weightedAverage;\n}\n\nconst list = msg.payload.value.data;\nfor (let key in list) {\n    list[key] = calc_weight_avg(list[key]);\n}\n\nmsg.payload.value.data = list;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "d8e9daa2c8509009",
        "type": "subflow:6fd479bb119a914b",
        "z": "da362e744a99a41b",
        "name": "",
        "x": 320,
        "y": 180,
        "wires": [
            [
                "a305889cee5bf6fb"
            ]
        ]
    },
    {
        "id": "6fd479bb119a914b",
        "type": "subflow",
        "name": "QuickSort",
        "info": "<div>\n  <p>\n    This is the implementation of the Quick Sort algorithm, which can also perform a reverse sort if desired.\n    To choose reverse sort, put <code>msg.payload.value.reverse</code> to True, else put it False.\n  </p>\n  <p>\n    It takes as input a list with the following structure (put this in the <code>msg.payload.value.data</code>):\n    <code>\n      {\n        \"attr_name1\": [\n          {\"value\": x, \"date\": y},\n          {\"value\": z, \"date\": e}\n        ],\n        \"attr_name2\": [\n          {\"value\": q, \"date\": w},\n          ...\n        ]\n      }\n    </code>\n  </p>\n  <p>\n    In the input list, each attribute (<em>attr_name1</em>, <em>attr_name2</em>, etc.) is associated with a list of dictionaries.\n    Each dictionary represents a value entry and contains two keys that should remain as is:\n  </p>\n  <ul>\n    <li><strong>\"value\"</strong>: Specifies the value of the attribute for a specific date.</li>\n    <li><strong>\"date\"</strong>: Specifies the date of the value entry. The date should be in UNIX timestamp format.</li>\n  </ul>\n  <p>\n    The subflow returns the same structure as the input list, but with the lists of each attribute key sorted either normally or in reverse order, based on the chosen option. The output can be found in <code>msg.payload.value.data</code>.\n  </p>\n</div>\n",
        "category": "",
        "in": [
            {
                "x": 140,
                "y": 120,
                "wires": [
                    {
                        "id": "8a975444807b5c68"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 580,
                "y": 120,
                "wires": [
                    {
                        "id": "6fef86d08511923a",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "8a975444807b5c68",
        "type": "function",
        "z": "6fd479bb119a914b",
        "name": "Quick Sort",
        "func": "function quickSort(arr, left, right) {\n    if (left < right) {\n        const pivotIndex = partition(arr, left, right);\n        quickSort(arr, left, pivotIndex - 1);\n        quickSort(arr, pivotIndex + 1, right);\n    }\n    return arr;\n}\n\nfunction partition(arr, left, right) {\n    // const pivot = new Date(arr[right].date);\n    const pivot = arr[right].date;\n    let i = left - 1;\n\n    for (let j = left; j < right; j++) {\n        // const currentDate = new Date(arr[j].date);\n        const currentDate = arr[j].date;\n        if (currentDate < pivot) {\n            i++;\n            swap(arr, i, j);\n        }\n    }\n\n    swap(arr, i + 1, right);\n    return i + 1;\n}\n\nfunction swap(arr, i, j) {\n    const temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n}\n\nvar list = msg.payload.value.data;\nfor (let key in list) {\n    list[key] = quickSort(list[key], 0, list[key].length - 1);\n}\nmsg.payload.value.data = list;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 120,
        "wires": [
            [
                "6fef86d08511923a"
            ]
        ]
    },
    {
        "id": "6fef86d08511923a",
        "type": "function",
        "z": "6fd479bb119a914b",
        "name": "Reverse Sort",
        "func": "// Input: list - array of dictionaries [{ temperature: number, date: string }]\nif (!msg.payload.value.reverse) {\n    return msg;\n}\n\nvar list = msg.payload.value.data;\n// console.log(list);\nfor (let key in list) {\n    list[key] = list[key].reverse();\n}\nmsg.payload.value.data = list;\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "bd72a052d58b666d",
        "type": "subflow",
        "name": "CommonFunctions Subflow",
        "info": "<p>This subflow is available in the following Docker image: <a href=\"https://hub.docker.com/r/kazakos13/common-functions\">https://hub.docker.com/r/kazakos13/common-functions</a></p>\n<p>To access it, you should use a POST HTTP request node and specify the endpoint you have declared.</p>\n<p>You can define the endpoint that the HTTP request will listen to by setting it in the UI of this subflow (the default is set to \"/run\").</p>\n<p>To use this subflow, you need to send a message with the attribute <code>msg.payload.value.function</code>. You can choose from three available functions implemented in this subflow:</p>\n<ul>\n  <li><code>wavg</code> - Weighted Average</li>\n  <li><code>quicksort</code> - QuickSort</li>\n  <li><code>kmeans</code> - K-means</li>\n</ul>\n<p>For the <code>wavg</code> and <code>quicksort</code> functions, you must include a <code>msg.payload.value.data</code> attribute in your message. You can also set a boolean <code>msg.payload.value.reverse</code> get the reversed results (or not by setting it to false). Here is an example JSON structure (declared in <code>msg.payload.value.data</code>):</p>\n<pre>\n{\n  \"temperature\": [\n    {\"value\": 20, \"date\": 1664515200000},\n    {\"value\": 23, \"date\": 1664774400000},\n    {\"value\": 18, \"date\": 1664428800000},\n    {\"value\": 25, \"date\": 1664601600000},\n    {\"value\": 22, \"date\": 1664688000000}\n  ],\n  \"humidity\": [\n    {\"value\": 20, \"date\": 1664515200000},\n    {\"value\": 23, \"date\": 1664774400000},\n    {\"value\": 18, \"date\": 1664428800000},\n    {\"value\": 25, \"date\": 1664601600000},\n    {\"value\": 22, \"date\": 1664688000000}\n  ]\n}\n</pre>\n<p>For sending data to the <code>kmeans</code> function, you should also declare <code>msg.payload.value.mode</code> as \"multiple\" or \"single\" depending on your requirements. Here is an example test input (declared in <code>msg.payload.value.data</code>):</p>\n<pre>\n[\n  {\"name\": \"cpu\", \"value\": [0.015876524497427744, 0.1902030897354209, 0.005733681579652651, 0.030480619519163435, 0.010371581070262016, 0.012062255039754171, 0.015249307746178593, 7.264773527105429e-7, 0.0050459685298976376, 0.004886347069983335]},\n  {\"name\": \"memory\", \"value\": [27979776, 38883328, 23392256, 22237184, 26570752, 24121344, 22372352, 22405120, 23105536, 22122496]}\n]\n</pre>\n<p>The output of all functions can be found in <code>msg.payload</code> and will contain the result of each function. You can find more test inputs and examples in the provided Docker image.</p>\nFor more info, see the documentation in the docker image.",
        "category": "",
        "in": [],
        "out": [],
        "env": [
            {
                "name": "ENDPOINT",
                "type": "str",
                "value": "/run"
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "b6207518de9cf6a0",
        "type": "http in",
        "z": "bd72a052d58b666d",
        "name": "endpoint",
        "url": "${ENDPOINT}",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 200,
        "wires": [
            [
                "1cfd6771ce7e339e"
            ]
        ]
    },
    {
        "id": "d557216d393485c9",
        "type": "http response",
        "z": "bd72a052d58b666d",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 910,
        "y": 200,
        "wires": []
    },
    {
        "id": "164a5bc24ba63e73",
        "type": "catch",
        "z": "bd72a052d58b666d",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 320,
        "y": 340,
        "wires": [
            [
                "deaf433b2a897d51"
            ]
        ]
    },
    {
        "id": "deaf433b2a897d51",
        "type": "function",
        "z": "bd72a052d58b666d",
        "name": "ADD ERROR INFO",
        "func": "var payload=msg.payload;\nmsg.payload={};\n\nmsg.payload.error=msg.error;\nmsg.payload.error.payload=payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 360,
        "wires": [
            [
                "d557216d393485c9"
            ]
        ]
    },
    {
        "id": "1cfd6771ce7e339e",
        "type": "switch",
        "z": "bd72a052d58b666d",
        "name": "",
        "property": "payload.value.function",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "kmeans",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "quicksort",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "wavg",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 350,
        "y": 200,
        "wires": [
            [
                "1a3e479697d40e12"
            ],
            [
                "1f9ef041ff50bf87"
            ],
            [
                "e87ed2db43046470"
            ]
        ]
    },
    {
        "id": "1a3e479697d40e12",
        "type": "function",
        "z": "bd72a052d58b666d",
        "name": "Clustering function",
        "func": "const clusterMaker = global.get('clusters');\nvar centroids = [];\nclusterMaker.k(3);\nclusterMaker.iterations(750)\n\nif (msg.payload.value.mode === \"multiple\"){\n    \n    //for each resource\n    msg.payload.value.data.forEach( element => {\n        \n        //creating clusterMakerInput\n        let clusterMakerInput = [];\n        element.value.forEach( value => {\n            clusterMakerInput.push([value])\n        });\n        \n        clusterMaker.data(clusterMakerInput);\n        \n        let temp = clusterMaker.clusters();\n        \n        //creating the output \n        let clusterMakerOutput = [];\n        temp.forEach( element => {\n            element.centroid.forEach(element2 => {\n                clusterMakerOutput.push(element2)\n            });\n        });\n        clusterMakerOutput.sort()\n        centroids.push({ [element.name]: clusterMakerOutput});\n    });\n} else if (msg.payload.value.mode === \"single\") {\n\n    //data.length = m\n    //data.element1.lenght = n\n    //finding the max length of all data arrays\n    let temp = [];\n    let n = [];\n\n    for (let m = 0; m < msg.payload.value.data.length;m++){\n        n.push(msg.payload.value.data[m].value.length)\n    }\n\n    const nMax = Math.max(...n);\n\n    //creating the array for clusterMakerInput\n    let clusterMakerInput = []; \n    for (let n = 0; n < nMax; n++) {\n        let arrTemp = [];\n        msg.payload.value.data.forEach( m => {\n\n            arrTemp.push(m.value[n]);\n\n        });\n        clusterMakerInput.push(arrTemp);\n    }\n    console.log(clusterMakerInput);\n    clusterMaker.data(clusterMakerInput);\n    centroids = clusterMaker.clusters();\n\n}\nmsg.payload = {centroids};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 100,
        "wires": [
            [
                "d557216d393485c9"
            ]
        ]
    },
    {
        "id": "1f9ef041ff50bf87",
        "type": "subflow:6fd479bb119a914b",
        "z": "bd72a052d58b666d",
        "name": "",
        "x": 580,
        "y": 200,
        "wires": [
            [
                "d557216d393485c9"
            ]
        ]
    },
    {
        "id": "e87ed2db43046470",
        "type": "subflow:da362e744a99a41b",
        "z": "bd72a052d58b666d",
        "name": "",
        "x": 560,
        "y": 280,
        "wires": [
            [
                "d557216d393485c9"
            ]
        ]
    }
]